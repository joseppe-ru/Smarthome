<?xml version="1.0" encoding="UTF-8"?><project name="Project_Smarthome" company="" webLink="http://" view-date="2024-02-06" view-index="0" gantt-divider-location="801" resource-divider-location="300" version="3.3.3300" locale="de_DE">
    <description><![CDATA[Smarthomesteuerung auf grundlage eines Raspebrry (mit OS)
Herzstück setellt der Rust-Server dar, welcher die Benutzeroerfläche hostet.
Der Server stellt ausßerdem das Bindeglied zwischen Clients für eingabe/ausgabe(UI,website,JS) und den Endgeräten
Eine Methode die enthalten sein wird ist ein MQTT Broker, damit ich an Smarthomegeräte senden kann (müssen im Netzwerk sein)
über BLE und Funk ist noch nich nachgedacht worden.
Smarthome-geräte mit cloud-protokollen werden auch noch eine Rollte spielen...]]></description>
    <view zooming-state="default:2" id="gantt-chart">
        <field id="tpd15" name="Notizen" width="20" order="0"/>
        <field id="tpd3" name="Vorgang" width="406" order="0"/>
        <field id="tpd5" name="Ende" width="153" order="1"/>
        <field id="tpd9" name="Vorgänger" width="191" order="2"/>
        <field id="tpd6" name="Dauer" width="50" order="3"/>
        <option id="filter.completedTasks" value="false"/>
        <option id="filter.dueTodayTasks" value="false"/>
        <option id="filter.overdueTasks" value="false"/>
        <option id="filter.inProgressTodayTasks" value="false"/>
    </view>
    <view id="resource-table">
        <field id="0" name="Ressource" width="210" order="0"/>
        <field id="1" name="Rolle" width="86" order="1"/>
    </view>
    <!-- -->
    <calendars>
        <day-types>
            <day-type id="0"/>
            <day-type id="1"/>
            <default-week id="1" name="default" sun="1" mon="0" tue="0" wed="0" thu="0" fri="0" sat="1"/>
            <only-show-weekends value="false"/>
            <overriden-day-types/>
            <days/>
        </day-types>
    </calendars>
    <tasks empty-milestones="true">
        <taskproperties>
            <taskproperty id="tpd0" name="type" type="default" valuetype="icon"/>
            <taskproperty id="tpd1" name="priority" type="default" valuetype="icon"/>
            <taskproperty id="tpd2" name="info" type="default" valuetype="icon"/>
            <taskproperty id="tpd3" name="name" type="default" valuetype="text"/>
            <taskproperty id="tpd4" name="begindate" type="default" valuetype="date"/>
            <taskproperty id="tpd5" name="enddate" type="default" valuetype="date"/>
            <taskproperty id="tpd6" name="duration" type="default" valuetype="int"/>
            <taskproperty id="tpd7" name="completion" type="default" valuetype="int"/>
            <taskproperty id="tpd8" name="coordinator" type="default" valuetype="text"/>
            <taskproperty id="tpd9" name="predecessorsr" type="default" valuetype="text"/>
        </taskproperties>
        <task id="0" uid="a3b45eb5dbfe48feaec7e8fa2f6f085b" name="Projektpplanung" meeting="false" start="2024-02-09" duration="4" complete="100" thirdDate="2024-02-14" thirdDate-constraint="0" expand="true">
            <task id="16" uid="794bc9be4aff43b1a1f402313f698c92" name="Module definieren" meeting="false" start="2024-02-14" duration="1" complete="100" thirdDate="2024-02-14" thirdDate-constraint="0" expand="true">
                <notes><![CDATA[==Legende:===========================================
#Code	#Nickname	#Name
PSM	PiSer-Modul	RaspberryPi Server Modul
FWU	FrWeb-UI	Frontend Website UI 
NDI	Nice-face	Network Device Interface
PPI	PiPi-Com 	RaspberryPi to RaspberryPi Comunication
RAC	RaAr-Anal-Com	RaspberryPi to Arduino Analog Comunication
RSW	RusSe-Wa 	Rust Server Workaround
======================================================

==PiSer-Modul:============================================================================
Ziel ist einen Webserver zu programmieren, auf welchem eine Website gehostet werden kann.
Alle Geräte im Netzwerk sollen darauf zugreifen können.
Vorzugsweise soll das ist Rust geschehen.
Ausweichmöglichkeit bietet eine Fertigversion wie Node.js oder anderes...
==========================================================================================

==FrWeb-UI:=============================================================================
Ziel ist die Programmierung einer Website, welche meine "Nice-face" Schnittstelle nutzt.
Von der Website aus sollen Smarthome-Geräte eingerichtet, verwaltet und bedient werden.
========================================================================================

==Nice-face:======================================================================
Ziel ist die Entwicklung einer Schnittstelle für eine Web-Programmiersprache, 
welche es ermöglichen soll, Smarthome-Geräte zu konfigurieren.
Das Interface soll auf API's bekannter Hersteller von Smarthome-Geräten zugreifen.
Ebenfalls soll die "PiPi-Com" integriert werden.
================================================================================== 

==PiPi-Com:=================================================================================================
Ziel ist die Pi zu Pi Kommunikation über das Netzwerk sicher zu stellen.
Ein RaspberryPi soll von einem anderen im Netzwerk als Smarthome-Gerät erkannt und integriert werden können.
Die Vielfältigkeit der Anwendungen an diesem Punkt könnten kaum umfangreicher sein.
Eine Benutzung findet es in der "RaAr-Anal-Com".
============================================================================================================

==RaAr-Anal-Com:============================================================
Ziel ist die Kommunkation zwischen RaspberryPi und Arduino über Verdrahtung.
An dieser stelle findet das "IR-Remote" seinen Platz.
============================================================================

==RusSe-Wa:================================================
commandline-tool, welches mir den workaround erleichtert.
liest pfade aus datei ein.
fügt alle js-scripte zusammen.
speist dieses bundel und die html-datei dem PiSer-Modul ein.
Soll automatisch neu starten, sobald ich etwas an der html oder js datei geändert und gspeichert habe
============================================================]]></notes>
                <depend id="17" type="2" difference="0" hardness="Strong"/>
            </task>
            <task id="26" uid="89f22404c2a64e4eba38bedeba0b0ef9" name="Grober Modulplan (importiert)" meeting="false" start="2024-02-09" duration="1" complete="100" thirdDate="2024-02-09" thirdDate-constraint="0" expand="true">
                <notes><![CDATA[
# 1. Theorie klären
#
# 1.1 (NDI)
#	Kann ich über die Schnittstelle der Hersteller Smart-Geräte anbinden?
#		- Für welche Programmiersprachen gibt es welche API's? (Python, Javascript, WASM?, Docker & GO?, PHP, Rust) (tuya, UPNP, ...) => Tabelle bitte!, nicht nötig
#		- mehrere API's gleichzeitig? => ja
#	=> Hersteller (Protokolle) sind wichtig, Die Hersteller haben Docs und API's, wär mit python definitiv simpler, cloudasierte sind schwerer und abhängiger
#
# 1.2 (PPI)
#	Wie kann ich einen RaspberryPI als Smart-Gerät einrichten?
#		- Brauche ich dafür eigenen server und client oder kann das mit über eine der API's (siehe 1.) laufen?
#		-> wenn ja: ich muss einen eigenen Server und Client Programmieren:
#			- gegenprüfen mit 1.
#				-> wie kann ich Server/Client darstellen, ist das Realistisch?
#	=> nichts leichter als das, MQTT oder RESTFUL server aufmachen und los gehts...
#	=> ist auf jeden fall machbar
#
# 1.3 (FWU)(PSM)
#	Wie kann ich die ausgwählte Programmiersprache (siehe 1.) als API für meine Website oder Server nuzten?
#		- spielt es eine Rolle, welche Art von Server ich habe? (Node.js, Rust, ...)
#		- Zugriff auf script, funtionen ausführen, Anzeige und Bedienung -> Muss alles von Website aus möglich sein
#	=> Rust server, RESTful api -> AJAX anfrage
#
# 1.4 (PSM)
#	Webserver mit Rust programmieren???
#	=> in ChatGPT sieht das eigentlich ziemlich easy aus und ich denke Rust ist als Server leistungsfähiger als Pythonj
#
# ========MS1: Programmiersprache auserwählen!!
#			-> Aufwandt-Nutzen beachten!!
#
# 2. Erste Test für Prognosen (Wie Komplex->ist das machbar; funktioniert es überhaupt, wie in Theorie beschrieben)
#
# 2.1 (PSM)
#	RUSTikaler ansatzt für Webserver
#		- HTTP Server
		- MQTT-Server
#		- Website integrieren
#

2.3 (FWU)
	Website für Server
		- Basic Input und Output element (zum Testen)
		- JS kommunikation über http mit Rust

2.4 (PIPI-Com)
	MQTT Client auf Raspi 1 B+
		- austausch mit Server
		- Eingabe und Ausgabe Methode

MS2: Alle Tests abgeschlossen!!
	-> an diesem Punkt brauche ich:
		- einen funktionierenden Webserver
		- eine kleine Website, die darauf läuft
		- Kommunikation zwischen Server und Website
		- Kommunikation zwischen Raspberrys über MQTT

3. Ausbau der Grundfunktionen (Die Parameter kann ich jetzt noch nicht festlegen)

# 3.1 (RSW)
	Websocket und kommunikation zwischen script und Server
	TSL/SSL sicherheit bei zugriff auf website
	]]></notes>
            </task>
        </task>
        <task id="17" uid="d30a2536c2ca45ff89a10702b3772013" name="Modul-Plan" meeting="true" start="2024-02-15" duration="0" complete="0" thirdDate="2024-02-14" thirdDate-constraint="0" expand="true">
            <depend id="11" type="2" difference="0" hardness="Strong"/>
        </task>
        <task id="11" uid="a297b160104942c69cb8652d30f1c175" name="PiSer-Modul - Der Server" meeting="false" start="2024-02-15" duration="1" complete="0" thirdDate="2024-02-14" thirdDate-constraint="0" expand="true">
            <task id="12" uid="2b8582e02dae4a58a8c269cfaaf65ee6" name="HTTP-Server" meeting="false" start="2024-02-15" duration="1" complete="0" thirdDate="2024-02-15" thirdDate-constraint="0" expand="true">
                <notes><![CDATA[Der HTTP-Server ist mit dem Crate "warp" entstanden

Schickt mir auf anfrage der URL (ist als Filter (Pfad) hardcoded) vom Client (JS, Browser) ein HTML-Dok mit JS code drin zu.
 -> Das ist das FrWeb-UI, meine Benutzeroberfläche


]]></notes>
            </task>
            <task id="14" uid="61d05bcdf3c54a20b381598c26558507" name="Websocket" meeting="false" start="2024-02-15" duration="1" complete="0" thirdDate="2024-02-15" thirdDate-constraint="0" expand="true">
                <notes><![CDATA[Für die Kommunikation zwischen JS (Client, Browser) und Server gedacht.
(initialisierung, anfragen behandeln, ...)]]></notes>
            </task>
            <task id="13" uid="1b5e550d77b840b88bf31910e0d93449" name="MQTT Broker" meeting="false" start="2024-02-15" duration="1" complete="0" thirdDate="2024-02-15" thirdDate-constraint="0" expand="true">
                <notes><![CDATA[Mit MQTT möchte ich mehrere Netzwerkfähige geräte (Raspberrys, ESP's, ...) untereinander Kommunizieren lassen.
]]></notes>
            </task>
        </task>
        <task id="18" uid="e4bcc4cf765445049e63ae42e954954f" name="FrWeb-UI" meeting="false" start="2024-02-06" duration="1" complete="0" expand="true">
            <task id="27" uid="f7ba91f461744bf995dd87bf7819bade" name="Recherche" meeting="false" start="2024-02-06" duration="1" complete="0" thirdDate="2024-02-06" thirdDate-constraint="0" expand="true">
                <notes><![CDATA[Ich könnte mich von Website zu Rust unterhalten
 -> dafür benutze ich Websockets.

#Wissenstand:
Websocket ist zwar eine Bi-direktionale Kommunikation, jedoch ist das senden schon schwer
Funktioniert besstens mit Polling, also JS-Client muss nachfragen und bekommt daraufhin eine Antwort.

Für selbsständiges  schicken müsste ich im Server bein initialisieren einen schlafenden Thread starten, der auf daten oder ein auflösen einer Semaphore wartet und dann sendet

Die Website soll sich teilweise nach Vorgabe des Servers (Websocket, Initialiserungsnachricht) selbst aufbauen. 
Wie  dynamisch ich das hinbekomme, kann ich nicht sagen. im Grunde geht das auch immer zur Last der Performance
]]></notes>
            </task>
            <task id="28" uid="7aeea397fc0548f9b80a49468df0e1e3" name="Speach-to-Text (kann jeder Browser)" meeting="false" start="2024-02-06" duration="1" complete="0" expand="true"/>
        </task>
        <task id="19" uid="fb07dcae13f747afa70bcd4ef37f3af0" name="Nice-Face" meeting="false" start="2024-02-09" duration="1" complete="0" expand="false">
            <task id="23" uid="17a0e564cf3a402392d844c6d77ee83f" name="Recherche" meeting="false" start="2024-02-09" duration="1" complete="0" thirdDate="2024-02-09" thirdDate-constraint="0" expand="true">
                <notes><![CDATA[Erkenntnisse durch Recherche:

Nice-face muss nach Protokollen / Hersteller aufgeteilt werden.
    -> also nach welches Protokoll benutzt wird
    da sind zum einen Cloud-basierte:
        - tuya
    und andere:
        - REST Protokoll (Phillips)

für Sachen wie TuYa braucht man denke ne extra Bibliothek oder so
Für die, die normale Protokolle nutzen, kann man simpel mit doku vom hersteller ansteuern

Python hat imports für TuYa
Python hat auch funktionen, die das kommunizieren über REST oder anderen sachen erleichtert
    -> das wär aber definitiv auch in anderen Sprachen möglich]]></notes>
            </task>
        </task>
        <task id="20" uid="b553141b7d1a46fe8ba37401eb1d1677" name="PiPi-Com" meeting="false" start="2024-02-09" duration="1" complete="0" expand="false">
            <task id="24" uid="f34f8bf5e31747899cc219318d1f7c67" name="Recherche" meeting="false" start="2024-02-09" duration="1" complete="0" thirdDate="2024-02-09" thirdDate-constraint="0" expand="true">
                <notes><![CDATA[es gibt ja schon Protokolle für IoT (hätte ich doch mal aufgepasst...)
MQTT
REST
 basierend auf HTTP....

mit python sehr einfach einen Server zu starten
mit javascript etwas schwerer glaube ich, aber geht auch

die Server könnte ich aber auch mit rust machen, geht evtl auch ganz gut

-> Also am Besten wäre auf meinem PiSer-Modul in Rust ebenfalls den MQTT-Broker zu starten (Rust)
-> ein Gerät mit Netzwerk-fähigkeit kann isch dann ja als gerät zum Publischen einloggen (Plattformanhängig, gerät muss netzwerfähig sein)
-> der Client (JS) brauch ja bloß zu abbonieren (FrWeb-UI)]]></notes>
            </task>
        </task>
        <task id="21" uid="e3a7c29f20314096a291eb378da6f245" name="RaAr-Anal-Com" meeting="false" start="2024-02-09" duration="1" complete="0" expand="false">
            <task id="25" uid="2e6f8560336b46ad862e819e6f4ec55c" name="Recherche" meeting="false" start="2024-02-09" duration="1" complete="0" thirdDate="2024-02-09" thirdDate-constraint="0" expand="true">
                <notes><![CDATA[Grundlage ist IR-Remote - Anwendung für Arduino

zu klären ist die Kommunikation zwischen Raspberry und Arduino.
 -> über Bus (SPI oder I²C)
 -> Befehle vereinbaren
 -> Übertragen werden muss:
    - Befehl (cmd)
    - Protokoll (NCS, Sony...)
    - evtl. addresse
    oder
     - sender oder empfangen...

]]></notes>
            </task>
        </task>
        <task id="22" uid="ab4acbd751814f43af2bb5a39a6af2f3" name="RusSe-Wa" meeting="false" start="2024-02-14" duration="1" complete="0" expand="true"/>
    </tasks>
    <resources/>
    <allocations/>
    <vacations/>
    <previous/>
    <roles roleset-name="Default"/>
</project>
